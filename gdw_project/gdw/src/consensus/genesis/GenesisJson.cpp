#ifndef GDW_TEST_NETWORK

#include <consensus/genesis/GenesisJson.hpp>
#include <consensus/genesis/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace gdwcore {
    namespace consensus {static const unsigned char raw_genesis_config0[] =
{
  0x31, 0x5e, 0xf2, 0x5a, 0x00, 0x09, 0x04, 0x67, 0x64, 0x77, 0x30, 0x03, 0x72, 
  0x22, 0xa4, 0xbe, 0x6e, 0x71, 0x03, 0x8a, 0x44, 0x66, 0x99, 0x18, 0xb0, 0x64, 
  0xfb, 0x64, 0x7b, 0x9f, 0x29, 0x90, 0x72, 0x26, 0x41, 0x0d, 0x9c, 0x8a, 0xcc, 
  0x67, 0x6c, 0x92, 0xd2, 0xf1, 0x04, 0x67, 0x64, 0x77, 0x31, 0x03, 0x70, 0xd9, 
  0x26, 0x68, 0xb4, 0x59, 0x6e, 0x42, 0x41, 0x31, 0x00, 0xd4, 0x54, 0x2b, 0x50, 
  0x24, 0x65, 0x51, 0xbd, 0x2e, 0x82, 0x74, 0x20, 0x16, 0x44, 0x62, 0xcc, 0x2c, 
  0xd9, 0x41, 0x8f, 0xf1, 0x04, 0x67, 0x64, 0x77, 0x32, 0x03, 0xf6, 0x2c, 0x61, 
  0x4b, 0x06, 0x86, 0x47, 0x30, 0x0e, 0xf8, 0xfd, 0x20, 0xaf, 0xfa, 0xee, 0xaf, 
  0xbb, 0x5b, 0x6b, 0x90, 0x21, 0x69, 0x99, 0x92, 0x59, 0x5b, 0x8d, 0x4f, 0x49, 
  0x2f, 0x1d, 0x39, 0x04, 0x67, 0x64, 0x77, 0x33, 0x03, 0x58, 0x61, 0x8b, 0x3f, 
  0xc3, 0x11, 0x7c, 0x70, 0xb0, 0x2b, 0xff, 0x59, 0x89, 0xe1, 0x1f, 0xd9, 0x64, 
  0xed, 0xd3, 0xad, 0x32, 0x0e, 0x40, 0x16, 0x52, 0x6c, 0x31, 0x28, 0xc4, 0xe2, 
  0x3e, 0xa5, 0x04, 0x67, 0x64, 0x77, 0x34, 0x02, 0xdd, 0xdb, 0x4e, 0x0a, 0x36, 
  0xe0, 0x46, 0xfe, 0xfe, 0x1e, 0x7b, 0x40, 0xb0, 0xb7, 0x11, 0x1d, 0xec, 0x47, 
  0x5c, 0xc5, 0x56, 0x04, 0xf2, 0x57, 0xb9, 0xdb, 0x1b, 0x9c, 0xad, 0x26, 0xeb, 
  0x50, 0x04, 0x67, 0x64, 0x77, 0x35, 0x03, 0x55, 0x21, 0x37, 0x4d, 0x4e, 0x36, 
  0x51, 0x54, 0xc9, 0xa7, 0x5a, 0x55, 0xa3, 0x4f, 0x18, 0x66, 0x90, 0xa2, 0xee, 
  0x26, 0xf8, 0x54, 0x9c, 0x30, 0xc4, 0xa2, 0xa4, 0x0e, 0x3a, 0x7a, 0xa1, 0x1b, 
  0x04, 0x67, 0x64, 0x77, 0x36, 0x03, 0x4a, 0x85, 0x06, 0xc7, 0x3c, 0xc3, 0x8a, 
  0xc4, 0x6c, 0xc4, 0x62, 0x57, 0x5c, 0x6e, 0xba, 0x2b, 0xd4, 0xed, 0xdd, 0x90, 
  0x7d, 0xaa, 0x34, 0xfa, 0xb2, 0xd5, 0xa0, 0x6f, 0x3a, 0x1a, 0x76, 0x98, 0x04, 
  0x67, 0x64, 0x77, 0x37, 0x03, 0xce, 0x7a, 0xdc, 0x70, 0x07, 0x17, 0xd9, 0xcd, 
  0x0f, 0x20, 0xa0, 0xd4, 0xa2, 0xe3, 0x5b, 0x4e, 0xb2, 0x00, 0x2e, 0x6f, 0x65, 
  0xc1, 0x17, 0x4e, 0x45, 0x07, 0x90, 0xe7, 0x96, 0x8d, 0x16, 0x33, 0x04, 0x67, 
  0x64, 0x77, 0x38, 0x02, 0xb1, 0xdf, 0x91, 0xb1, 0x09, 0xdc, 0xca, 0x00, 0x5e, 
  0x90, 0x3e, 0x1e, 0x72, 0x3b, 0xe1, 0xe1, 0x1e, 0x37, 0xa4, 0x8b, 0xe4, 0x2d, 
  0xd9, 0x74, 0x42, 0x73, 0x1c, 0x46, 0x4f, 0x7b, 0x69, 0x66, 0x09, 0x22, 0x47, 
  0x59, 0x53, 0x38, 0x42, 0x34, 0x6d, 0x55, 0x55, 0x71, 0x6a, 0x57, 0x44, 0x41, 
  0x69, 0x70, 0x62, 0x33, 0x58, 0x4c, 0x35, 0x75, 0x42, 0x48, 0x63, 0x69, 0x6d, 
  0x48, 0x54, 0x70, 0x51, 0x33, 0x78, 0x6b, 0x00, 0x80, 0xc6, 0xa4, 0x7e, 0x8d, 
  0x03, 0x00, 0x22, 0x47, 0x65, 0x35, 0x78, 0x4a, 0x72, 0x62, 0x52, 0x54, 0x66, 
  0x37, 0x4a, 0x59, 0x6d, 0x77, 0x36, 0x56, 0x78, 0x63, 0x78, 0x56, 0x35, 0x63, 
  0x7a, 0x58, 0x4b, 0x37, 0x47, 0x6e, 0x77, 0x36, 0x44, 0x33, 0x39, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x47, 0x5a, 0x62, 0x53, 0x6a, 0x33, 
  0x62, 0x7a, 0x42, 0x37, 0x36, 0x57, 0x46, 0x39, 0x4d, 0x4d, 0x63, 0x36, 0x4d, 
  0x62, 0x4e, 0x42, 0x6d, 0x4d, 0x42, 0x48, 0x4c, 0x36, 0x4b, 0x71, 0x74, 0x63, 
  0x73, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x47, 0x65, 
  0x79, 0x66, 0x62, 0x76, 0x66, 0x35, 0x63, 0x62, 0x79, 0x6b, 0x51, 0x47, 0x6f, 
  0x64, 0x59, 0x34, 0x55, 0x4c, 0x63, 0x37, 0x4b, 0x32, 0x6b, 0x32, 0x35, 0x4d, 
  0x76, 0x52, 0x5a, 0x58, 0x57, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x22, 0x47, 0x59, 0x59, 0x56, 0x43, 0x4a, 0x4b, 0x73, 0x6f, 0x74, 0x75, 
  0x4c, 0x6d, 0x6f, 0x41, 0x66, 0x70, 0x72, 0x77, 0x6e, 0x56, 0x50, 0x69, 0x4c, 
  0x35, 0x54, 0x54, 0x78, 0x56, 0x69, 0x78, 0x4b, 0x35, 0x63, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x47, 0x4a, 0x78, 0x76, 0x4a, 0x74, 0x6b, 
  0x41, 0x4a, 0x4c, 0x51, 0x35, 0x37, 0x53, 0x32, 0x55, 0x47, 0x44, 0x54, 0x47, 
  0x75, 0x47, 0x46, 0x56, 0x69, 0x76, 0x75, 0x38, 0x36, 0x6e, 0x72, 0x48, 0x42, 
  0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x47, 0x65, 0x44, 
  0x45, 0x6d, 0x72, 0x43, 0x61, 0x54, 0x37, 0x43, 0x44, 0x53, 0x62, 0x74, 0x65, 
  0x71, 0x63, 0x6f, 0x39, 0x63, 0x6e, 0x61, 0x6d, 0x33, 0x74, 0x36, 0x36, 0x6f, 
  0x37, 0x37, 0x63, 0x41, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x22, 0x47, 0x59, 0x5a, 0x5a, 0x4a, 0x66, 0x64, 0x64, 0x74, 0x47, 0x72, 0x58, 
  0x72, 0x32, 0x69, 0x7a, 0x41, 0x38, 0x4d, 0x48, 0x6a, 0x69, 0x56, 0x69, 0x73, 
  0x76, 0x39, 0x4b, 0x52, 0x64, 0x72, 0x56, 0x47, 0x32, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x22, 0x47, 0x4d, 0x63, 0x41, 0x6d, 0x55, 0x43, 0x73, 
  0x71, 0x48, 0x58, 0x61, 0x68, 0x66, 0x53, 0x55, 0x4c, 0x6d, 0x4a, 0x39, 0x6a, 
  0x52, 0x68, 0x69, 0x33, 0x36, 0x63, 0x55, 0x47, 0x77, 0x51, 0x55, 0x4c, 0x39, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}
    }
} // end namespace gdwcore::consensus

#endif